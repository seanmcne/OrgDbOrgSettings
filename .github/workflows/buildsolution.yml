name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: windows-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the github.workspace directory
        run: |
          dir ${{ github.workspace }}
      - name: List files in the repository dir we want to see recurse
        run: |
          dir "$(Get-Location)\mspfedyn_\OrgDbOrgSettings\Solution" -Recurse
      - name: Calculate paths and set several variables for packing the solution 
        run: |
          $root = $env:GITHUB_WORKSPACE
          $path = "\mspfedyn_\OrgDbOrgSettings\Solution"
          $fullpath = Join-Path -Path $root -ChildPath $path
          dir $fullpath
          echo "fullpath=$fullpath" >> $env:VAR_FULLPATH
          $currentPath = "$(Get-Location)\mspfedyn_\OrgDbOrgSettings\Solution"
          echo "CurrentPath=$currentPath" >> $env:GITHUB_ENV
          $ZipPath = Get-Location
          echo "ZipPath=$zipPath" >> $env:GITHUB_ENV
          write-host "START"
          write-host "ZipPath: $ZipPath"
          write-host "currentPath: $currentPath"
          write-host "END"
      - name: apply updated version
        run: | 
          #edit settings.xml to strip comments 
          $settingsXmlPath = ${{ env.CurrentPath  }}"\WebResources\mspfedyn_\OrgDbOrgSettings\settings.xml"
          # Regular expression pattern to find the version in the build number 
          # and then apply it to the assemblies
          $VersionRegex = "\d+\.\d+\.\d+\.\d+"
          $version = "1.0.$((get-date).ToString("yyMM")).$($GITHUB_RUN_NUMBER)"
          write-host $version
      - run: echo "üçè This job's status is ${{ job.status }}."
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
      - name: Pack Solution
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: "orgDbOrgSettings.zip"
          solution-folder: ${{ env.CurrentPath  }}
          solution-type: "both"
      - name: Create Archive
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ${{ env.ZipPath  }}
